<?php

/**
 * @file
 * Contains draggable_mapper.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\draggable_mapper\Form\DraggableMapperForm;
use Drupal\draggable_mapper\PreprocessHooks\DraggableMapperPreprocessHook;

/**
 * Implements hook_help().
 */
function draggable_mapper_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.draggable_mapper':
      $output = '';
      $output .= '<h3>' . \Drupal::translation()->translate('About') . '</h3>';
      $output .= '<p>' . \Drupal::translation()->translate('The Draggable Mapper module provides a custom entity type for creating maps with draggable markers.') . '</p>';
      return $output;
    case 'entity.draggable_mapper.collection':
      return '<p>' . \Drupal::translation()->translate('Draggable Mappers allow you to create interactive maps with draggable markers. Each mapper consists of a background image and one or more markers that can be positioned on the image.') . '</p>';
  }
}

/**
 * Implements hook_theme().
 */
function draggable_mapper_theme($existing, $type, $theme, $path) {
  return [
    'draggable_mapper' => [
      'render element' => 'elements',
      'template' => 'draggable-mapper',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function template_preprocess_draggable_mapper(array &$variables) {
  // Delegate processing to the dedicated preprocess class
  DraggableMapperPreprocessHook::preprocessDraggableMapper($variables);
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function draggable_mapper_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form['#entity_type'] == 'draggable_mapper') {
    // Add the library
    $entity_form['#attached']['library'][] = 'draggable_mapper/draggable_mapper.form';
    
    // Create a form object to use the addPreviewContainer method
    $form_object = \Drupal::entityTypeManager()
      ->getFormObject('draggable_mapper', 'default');
      
    if ($form_object instanceof DraggableMapperForm) {
      // Call the addPreviewContainer method
      $form_object->addPreviewContainer($entity_form, $form_state);
    }
  }
}