<?php

namespace Drupal\Tests\draggable_mapper\Functional;

use Drupal\Core\Url;
use Drupal\Tests\BrowserTestBase;
use Drupal\Tests\TestFileCreationTrait;

/**
 * Tests the basic functionality of Draggable Mapper entities.
 *
 * @group draggable_mapper
 */
class DraggableMapperTest extends BrowserTestBase {

  use TestFileCreationTrait;

  /**
   * Modules to enable.
   *
   * @var array
   */
  protected static $modules = [
    'draggable_mapper',
    'block',
    'field_ui',
    'file',
    'image',
    'user',
    'node',
    'system',
  ];

  /**
   * The theme to use with the test.
   *
   * @var string
   */
  protected $defaultTheme = 'stark';

  /**
   * A test user with administrative privileges.
   *
   * @var \Drupal\user\UserInterface
   */
  protected $adminUser;

  /**
   * A draggable mapper entity ID for testing.
   *
   * @var string
   */
  protected $entityId;

  /**
   * {@inheritdoc}
   */
  protected function setUp(): void {
    parent::setUp();

    // Create test user with administrative privileges.
    $this->adminUser = $this->drupalCreateUser([
      'administer draggable mapper',
      'add draggable mapper',
      'edit draggable mapper',
      'delete draggable mapper',
      'view draggable mapper',
      'access content',
      'access administration pages',
    ]);
    $this->drupalLogin($this->adminUser);

    // Create a test entity with an image for later tests.
    $this->createMapEntityWithImage();
  }

  /**
   * Creates a map entity with an image for testing.
   */
  protected function createMapEntityWithImage() {
    // Navigate to the add form.
    $this->drupalGet('admin/structure/draggable_mapper/add');
    
    // Print debug info about the current page
    $this->assertTrue(TRUE, "Current URL: " . $this->getSession()->getCurrentUrl());
    $this->assertTrue(TRUE, "Page status code: " . $this->getSession()->getStatusCode());
    
    // Prepare a test image.
    $image = current($this->getTestFiles('image'));
    $image_path = $this->container->get('file_system')->realpath($image->uri);

    // Submit the form with minimal values.
    $edit = [
      'name[0][value]' => 'Test Map',
      'status[value]' => 1,
      'files[field_dme_image_0]' => $image_path,
    ];
    
    // Debug: Output all form elements and buttons
    $page = $this->getSession()->getPage();
    $forms = $page->findAll('css', 'form');
    $this->assertTrue(TRUE, "Number of forms found: " . count($forms));
    
    $buttons = $page->findAll('css', 'input[type="submit"], button');
    $button_info = [];
    foreach ($buttons as $button) {
      $button_info[] = [
        'id' => $button->getAttribute('id'),
        'name' => $button->getAttribute('name'),
        'value' => $button->getAttribute('value'),
        'text' => $button->getText(),
        'class' => $button->getAttribute('class'),
      ];
    }
    $this->assertTrue(TRUE, "Available buttons: " . json_encode($button_info));
    
    // Add form fields
    foreach ($edit as $field => $value) {
      if (strpos($field, 'files[') === 0) {
        $this->getSession()->getPage()->attachFileToField(substr($field, 6, -1), $value);
      } else {
        $this->getSession()->getPage()->fillField($field, $value);
      }
    }
    
    // Find and click the save button by its specific attributes
    $saveButton = $this->getSession()->getPage()->findButton('Save');
    if (!$saveButton) {
      $saveButton = $this->getSession()->getPage()->find('css', 'input#edit-submit[value="Save"]');
    }
    
    if ($saveButton) {
      $saveButton->click();
    } else {
      $this->fail('Save button not found on the form');
    }

    // Store the entity ID from the URL for later use.
    $url_parts = explode('/', $this->getUrl());
    $this->entityId = end($url_parts);
  }

  /**
   * Tests that the form elements for markers are present and can be saved.
   */
  public function testMarkerFormElements() {
    // Navigate to edit form.
    $this->drupalGet("admin/structure/draggable_mapper/{$this->entityId}/edit");
    
    // Add a marker to test.
    $this->submitForm([], 'Add Marker');
    
    // Fill in marker information.
    $edit = [
      'field_dme_marker[0][subform][field_dme_marker_title][0][value]' => 'Form Test Marker',
      'field_dme_marker[0][subform][field_dme_marker_x][0][value]' => '0.25',
      'field_dme_marker[0][subform][field_dme_marker_y][0][value]' => '0.75',
    ];
    
    // Try to find and click the save button using various approaches
    $page = $this->getSession()->getPage();
    $saveButton = $page->findButton('Save');
    if (!$saveButton) {
      $saveButton = $page->findButton('save');
    }
    if (!$saveButton) {
      // Try finding by CSS selector
      $saveButton = $page->find('css', 'input[type="submit"].button--primary');
    }
    if (!$saveButton) {
      // Try finding any submit button
      $saveButton = $page->find('css', 'input[type="submit"]');
    }
    
    if ($saveButton) {
      // Add form fields
      foreach ($edit as $field => $value) {
        $this->getSession()->getPage()->fillField($field, $value);
      }
      $saveButton->click();
    } else {
      $this->fail('Save button not found on the form');
    }
    
    // Verify entity was saved.
    $this->assertSession()->pageTextContains('has been updated');
    
    // Edit the entity again to verify the coordinates were saved.
    $this->drupalGet("admin/structure/draggable_mapper/{$this->entityId}/edit");
    
    // Check the saved coordinates.
    $this->assertSession()->fieldValueEquals('field_dme_marker[0][subform][field_dme_marker_x][0][value]', '0.25');
    $this->assertSession()->fieldValueEquals('field_dme_marker[0][subform][field_dme_marker_y][0][value]', '0.75');
  }

  /**
   * Tests that markers appear correctly in view mode.
   */
  public function testMarkersInViewMode() {
    // First, we need to add a marker to the entity.
    $this->drupalGet("admin/structure/draggable_mapper/{$this->entityId}/edit");
    
    // Add a marker with coordinates.
    $this->submitForm([], 'Add Marker');
    
    // Fill in marker information.
    $edit = [
      'field_dme_marker[0][subform][field_dme_marker_title][0][value]' => 'View Mode Test Marker',
      'field_dme_marker[0][subform][field_dme_marker_x][0][value]' => '0.5',
      'field_dme_marker[0][subform][field_dme_marker_y][0][value]' => '0.5',
    ];
    
    // Try to find and click the save button using various approaches
    $page = $this->getSession()->getPage();
    $saveButton = $page->findButton('Save');
    if (!$saveButton) {
      $saveButton = $page->findButton('save');
    }
    if (!$saveButton) {
      // Try finding by CSS selector
      $saveButton = $page->find('css', 'input[type="submit"].button--primary');
    }
    if (!$saveButton) {
      // Try finding any submit button
      $saveButton = $page->find('css', 'input[type="submit"]');
    }
    
    if ($saveButton) {
      // Add form fields
      foreach ($edit as $field => $value) {
        $this->getSession()->getPage()->fillField($field, $value);
      }
      $saveButton->click();
    } else {
      $this->fail('Save button not found on the form');
    }
    
    // Visit the entity view page.
    $this->drupalGet("admin/structure/draggable_mapper/{$this->entityId}");
    
    // Check that the marker is present in view mode.
    $this->assertSession()->elementExists('css', '.dme-marker');
    
    // Verify that the marker title appears in the view.
    $this->assertSession()->pageTextContains('View Mode Test Marker');
    
    // Check that the map container exists.
    $this->assertSession()->elementExists('css', '.draggable-mapper');
  }

  /**
   * Tests form submissions with different coordinate values.
   */
  public function testCoordinateFormSubmission() {
    // Navigate to edit form.
    $this->drupalGet("admin/structure/draggable_mapper/{$this->entityId}/edit");
    
    // Add a marker to test coordinates.
    $this->submitForm([], 'Add Marker');
    
    // Fill in marker title.
    $edit = [
      'field_dme_marker[0][subform][field_dme_marker_title][0][value]' => 'Coordinate Test Marker',
      'field_dme_marker[0][subform][field_dme_marker_x][0][value]' => '0.5',
      'field_dme_marker[0][subform][field_dme_marker_y][0][value]' => '0.5',
    ];
    
    // Try to find and click the save button
    $page = $this->getSession()->getPage();
    $saveButton = $page->findButton('Save');
    if (!$saveButton) {
      $saveButton = $page->findButton('save');
    }
    if (!$saveButton) {
      // Try finding by CSS selector
      $saveButton = $page->find('css', 'input[type="submit"].button--primary');
    }
    if (!$saveButton) {
      // Try finding any submit button
      $saveButton = $page->find('css', 'input[type="submit"]');
    }
    
    if ($saveButton) {
      // Add form fields
      foreach ($edit as $field => $value) {
        $this->getSession()->getPage()->fillField($field, $value);
      }
      $saveButton->click();
    } else {
      $this->fail('Save button not found on the form');
    }
    
    $this->assertSession()->pageTextContains('has been updated');
    
    // Edit and test boundary case coordinates
    $this->drupalGet("admin/structure/draggable_mapper/{$this->entityId}/edit");
    
    $edit = [
      'field_dme_marker[0][subform][field_dme_marker_x][0][value]' => '0',
      'field_dme_marker[0][subform][field_dme_marker_y][0][value]' => '1',
    ];
    
    // Try to find and click the save button again
    $page = $this->getSession()->getPage();
    $saveButton = $page->findButton('Save');
    if (!$saveButton) {
      $saveButton = $page->findButton('save');
    }
    if (!$saveButton) {
      // Try finding by CSS selector
      $saveButton = $page->find('css', 'input[type="submit"].button--primary');
    }
    if (!$saveButton) {
      // Try finding any submit button
      $saveButton = $page->find('css', 'input[type="submit"]');
    }
    
    if ($saveButton) {
      // Add form fields
      foreach ($edit as $field => $value) {
        $this->getSession()->getPage()->fillField($field, $value);
      }
      $saveButton->click();
    } else {
      $this->fail('Save button not found on the form');
    }
    
    $this->assertSession()->pageTextContains('has been updated');
    
    // Edit and test potentially out-of-bounds values
    $this->drupalGet("admin/structure/draggable_mapper/{$this->entityId}/edit");
    
    $edit = [
      'field_dme_marker[0][subform][field_dme_marker_x][0][value]' => '1.5',
      'field_dme_marker[0][subform][field_dme_marker_y][0][value]' => '-0.2',
    ];
    
    // Try to find and click the save button again
    $page = $this->getSession()->getPage();
    $saveButton = $page->findButton('Save');
    if (!$saveButton) {
      $saveButton = $page->findButton('save');
    }
    if (!$saveButton) {
      // Try finding by CSS selector
      $saveButton = $page->find('css', 'input[type="submit"].button--primary');
    }
    if (!$saveButton) {
      // Try finding any submit button
      $saveButton = $page->find('css', 'input[type="submit"]');
    }
    
    if ($saveButton) {
      // Add form fields
      foreach ($edit as $field => $value) {
        $this->getSession()->getPage()->fillField($field, $value);
      }
      $saveButton->click();
    } else {
      $this->fail('Save button not found on the form');
    }
    
    // Check if validation messages appear
    // This will pass either way, as we're just checking if the form handles the values
    $this->assertSession()->statusCodeEquals(200);
  }

  /**
   * {@inheritdoc}
   */
  protected function tearDown(): void {
    // Clean up any entities created during tests.
    if (isset($this->entityId)) {
      try {
        $storage = \Drupal::entityTypeManager()->getStorage('draggable_mapper');
        $entity = $storage->load($this->entityId);
        if ($entity) {
          $entity->delete();
        }
      }
      catch (\Exception $e) {
        // Log but continue with teardown.
      }
    }
    
    parent::tearDown();
  }
}
