<?php

/**
 * @file
 * Install, update and uninstall functions for the Draggable Mapper module.
 */

/**
 * Implements hook_install().
 */
function draggable_mapper_install() {
  // Clear caches to ensure clean installation
  \Drupal::service('cache.discovery')->deleteAll();
  \Drupal::service('cache.config')->deleteAll();
  
  // Remove any conflicting configuration
  _draggable_mapper_remove_conflicting_configs();
}

/**
 * Implements hook_uninstall().
 */
function draggable_mapper_uninstall() {
  // Clean up database tables
  _draggable_mapper_remove_database_tables();
  
  // Clean up configuration objects
  _draggable_mapper_remove_configs();
  
  // Reset the uninstalling state
  \Drupal::state()->delete('draggable_mapper.uninstalling');
}

/**
 * Fix entity type definitions if tables don't exist.
 */
function draggable_mapper_update_8001() {
  $database = \Drupal::database();
  $entity_type_id = 'draggable_mapper';
  
  // Check if our tables exist
  if (!$database->schema()->tableExists($entity_type_id)) {
    // Tables don't exist, so clean up the entity type definition from key_value
    if ($database->schema()->tableExists('key_value')) {
      $database->delete('key_value')
        ->condition('collection', 'entity.definitions.installed')
        ->condition('name', $entity_type_id . '.entity_type')
        ->execute();
      
      $database->delete('key_value')
        ->condition('collection', 'entity.storage_schema.sql')
        ->condition('name', $entity_type_id . '.entity_schema_data')
        ->execute();
    }
    
    // Clear all caches using the cache service
    \Drupal::service('cache.discovery')->invalidateAll();
    
    return new \Drupal\Core\StringTranslation\TranslatableMarkup('Entity table definitions have been cleaned up.');
  }
  
  return new \Drupal\Core\StringTranslation\TranslatableMarkup('No changes were necessary.');
}

/**
 * Helper function to remove conflicting configuration.
 */
function _draggable_mapper_remove_conflicting_configs() {
  $config_factory = \Drupal::configFactory();
  $conflict_configs = [
    'core.entity_form_display.node.reference_mapping.default',
    'field.field.node.reference_mapping.field_draggable_map',
  ];
  
  foreach ($conflict_configs as $config_name) {
    if (!$config_factory->getEditable($config_name)->isNew()) {
      $config_factory->getEditable($config_name)->delete();
    }
  }
}

/**
 * Helper function to remove database tables.
 */
function _draggable_mapper_remove_database_tables() {
  $connection = \Drupal::database();
  $schema = $connection->schema();
  
  // Paragraph field tables
  $paragraph_tables = [
    'paragraph__field_dme_marker_description',
    'paragraph__field_dme_marker_icon',
    'paragraph__field_dme_marker_title', 
    'paragraph__field_dme_marker_x',
    'paragraph__field_dme_marker_y',
    'paragraph_revision__field_dme_marker_description',
    'paragraph_revision__field_dme_marker_icon',
    'paragraph_revision__field_dme_marker_title',
    'paragraph_revision__field_dme_marker_x',
    'paragraph_revision__field_dme_marker_y',
  ];
  
  foreach ($paragraph_tables as $table) {
    if ($schema->tableExists($table)) {
      $schema->dropTable($table);
    }
  }
  
  // Node field tables
  $node_tables = [
    'node__field_draggable_map',
    'node_revision__field_draggable_map',
  ];
  
  foreach ($node_tables as $table) {
    if ($schema->tableExists($table)) {
      $schema->dropTable($table);
    }
  }
  
  // Entity tables
  $entity_tables = [
    'draggable_mapper',
    'draggable_mapper_field_data',
    'draggable_mapper_field_revision',
    'draggable_mapper_revision',
  ];
  
  foreach ($entity_tables as $table) {
    if ($schema->tableExists($table)) {
      $schema->dropTable($table);
    }
  }
}

/**
 * Helper function to remove module configuration.
 */
function _draggable_mapper_remove_configs() {
  $config_factory = \Drupal::configFactory();
  
  // Delete field configurations
  $config_names = $config_factory->listAll('field.field.draggable_mapper.');
  foreach ($config_names as $config_name) {
    $config_factory->getEditable($config_name)->delete();
  }
  
  // Delete field storage configurations
  $config_names = $config_factory->listAll('field.storage.draggable_mapper.');
  foreach ($config_names as $config_name) {
    $config_factory->getEditable($config_name)->delete();
  }
  
  // Clean up view and form displays
  $display_types = ['core.entity_view_display.draggable_mapper.', 'core.entity_form_display.draggable_mapper.'];
  foreach ($display_types as $display_type) {
    $config_names = $config_factory->listAll($display_type);
    foreach ($config_names as $config_name) {
      $config_factory->getEditable($config_name)->delete();
    }
  }
  
  // Also clean up any paragraph, field widget, or node configurations this module created
  $additional_configs = [
    'core.entity_form_display.draggable_mapper.draggable_mapper.default',
    'core.entity_form_display.paragraph.dme_marker.default',
    'core.entity_view_display.draggable_mapper.draggable_mapper.default',
    'core.entity_view_display.paragraph.dme_marker.default',
    'field.field.draggable_mapper.draggable_mapper.field_dme_image',
    'field.field.draggable_mapper.draggable_mapper.field_dme_marker',
    'field.field.paragraph.dme_marker.field_dme_marker_description',
    'field.field.paragraph.dme_marker.field_dme_marker_icon',
    'field.field.paragraph.dme_marker.field_dme_marker_title',
    'field.field.paragraph.dme_marker.field_dme_marker_x',
    'field.field.paragraph.dme_marker.field_dme_marker_y',
    'field.storage.draggable_mapper.field_dme_image',
    'field.storage.draggable_mapper.field_dme_marker',
    'field.storage.paragraph.field_dme_marker_description',
    'field.storage.paragraph.field_dme_marker_icon',
    'field.storage.paragraph.field_dme_marker_title',
    'field.storage.paragraph.field_dme_marker_x',
    'field.storage.paragraph.field_dme_marker_y',
    'paragraphs.paragraphs_type.dme_marker',
  ];
  
  foreach ($additional_configs as $config_name) {
    if ($config_factory->get($config_name)->isNew() === FALSE) {
      $config_factory->getEditable($config_name)->delete();
    }
  }
  
  // Clear all caches
  drupal_flush_all_caches();
}